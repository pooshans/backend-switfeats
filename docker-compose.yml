version: '3.8'
services:
  # Database
  postgres:
    image: postgis/postgis:16-3.4
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build: 
      context: ./api-gateway
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  # Order Service
  order-service:
    build: 
      context: ./order-service
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  # Restaurant Service
  restaurant-service:
    build: 
      context: ./restaurant-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  # Driver Service
  driver-service:
    build: 
      context: ./driver-service
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  # Data Simulator
  simulator-service:
    build: 
      context: ./simulator-service
    ports:
      - "8090:8090"
    depends_on:
      api-gateway:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SIMULATOR_API_URL=http://api-gateway:8080
      - SIMULATOR_DRIVER_COUNT=10000
      - SIMULATOR_UPDATE_INTERVAL=500

volumes:
  postgres-data:
  redis-data:
